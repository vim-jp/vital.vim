Describe Bitwise
  Before all
    let B = vital#of('vital').import('Bitwise')
  End

  Describe .lshift()
    It shifts bits to left
      Assert Equals(B.lshift(0, 0), 0)
      Assert Equals(B.lshift(0, 1), 0)
      Assert Equals(B.lshift(0, 31), 0)
      Assert Equals(B.lshift(0, 32), 0)
      Assert Equals(B.lshift(1, 0), 0x1)
      Assert Equals(B.lshift(1, 1), 0x2)
      Assert Equals(B.lshift(1, 31), 0x80000000)
      Assert Equals(B.lshift(1, 32), 1)
      Assert Equals(B.lshift(0x80000000, 0), 0x80000000)
      Assert Equals(B.lshift(0x80000000, 1), 0)
    End
    It shifts bits to left (random)
      Assert Equals(B.lshift(1483929134, 14), -1114931200)
      Assert Equals(B.lshift(152442939, 25), 1979711488)
      Assert Equals(B.lshift(505850863, -32), 505850863)
      Assert Equals(B.lshift(1997594360, 18), 2078277632)
      Assert Equals(B.lshift(2121708807, -5), 939524096)
      Assert Equals(B.lshift(344493590, -27), -1861107008)
      Assert Equals(B.lshift(630127521, 14), -1092075520)
      Assert Equals(B.lshift(-601661263, 0), -601661263)
      Assert Equals(B.lshift(661012213, -26), -644891328)
      Assert Equals(B.lshift(828605241, -14), 216268800)
    End
  End

  Describe .rshift()
    It shifts bits to right
      Assert Equals(B.rshift(0, 0), 0)
      Assert Equals(B.rshift(0, 1), 0)
      Assert Equals(B.rshift(0, 31), 0)
      Assert Equals(B.rshift(0, 32), 0)
      Assert Equals(B.rshift(0x80000000, 0), 0x80000000)
      Assert Equals(B.rshift(0x80000000, 1), 0x40000000)
      Assert Equals(B.rshift(0x80000000, 31), 0x1)
      Assert Equals(B.rshift(0x80000000, 32), 0x80000000)
      Assert Equals(B.rshift(1, 0), 0x1)
      Assert Equals(B.rshift(1, 1), 0)
    End
    It shifts bits to right (random)
      Assert Equals(B.rshift(-488472937, -18), 232329)
      Assert Equals(B.rshift(2077835096, 9), 4058271)
      Assert Equals(B.rshift(-944346085, -27), 104706912)
      Assert Equals(B.rshift(-410125501, -23), 7587581)
      Assert Equals(B.rshift(-976767239, 10), 3240429)
      Assert Equals(B.rshift(999071336, 20), 952)
      Assert Equals(B.rshift(1103884747, -13), 2105)
      Assert Equals(B.rshift(1971440513, -1), 0)
      Assert Equals(B.rshift(-440231805, -25), 30115121)
      Assert Equals(B.rshift(1872776440, 23), 223)
    End
  End

  Describe .compare()
    It compares as unsigned int
      Assert Equals(B.compare(2, 1), 1)
      Assert Equals(B.compare(0xFFFFFFFE, 0xFFFFFFFF), -1)
      Assert Equals(B.compare(0x0FFFFFFF, 0xFFFFFFFF), -1)
    End
  End

  Describe .invert()
    It returns bitwise invert
      Assert Equals(B.invert(0), -0x1)
      Assert Equals(B.invert(0xffffffff), -0x100000000)
      Assert Equals(B.invert(0xf0f0f0f), -0xf0f0f10)
      Assert Equals(B.invert(0xf0f0f0f0), -0xf0f0f0f1)
      Assert Equals(B.invert(0xffff), -0x10000)
      Assert Equals(B.invert(0xff), -0x100)
      Assert Equals(B.invert(0xffffff), -0x1000000)
    End
    It returns bitwise invert (random)
      Assert Equals(B.invert(-2104009955), 2104009954)
      Assert Equals(B.invert(-1317510048), 1317510047)
      Assert Equals(B.invert(1806018573), -1806018574)
      Assert Equals(B.invert(-980665656), 980665655)
      Assert Equals(B.invert(-537231506), 537231505)
      Assert Equals(B.invert(-46151799), 46151798)
      Assert Equals(B.invert(1213208697), -1213208698)
      Assert Equals(B.invert(943205096), -943205097)
      Assert Equals(B.invert(2015127505), -2015127506)
      Assert Equals(B.invert(35201008), -35201009)
    End
  End

  Describe .and()
    It returns bitwise AND
      Assert Equals(B.and(0, 0), 0)
      Assert Equals(B.and(0xffffffff, 0), 0)
      Assert Equals(B.and(0xffffffff, 0xffffffff), 0xffffffff)
      Assert Equals(B.and(0xf0f0f0f0, 0xf0f0f0f), 0)
      Assert Equals(B.and(0xf0f0f0f0, 0xf0f0f0f0), 0xf0f0f0f0)
      Assert Equals(B.and(0xffff0000, 0xffff), 0)
      Assert Equals(B.and(0xff000000, 0xff), 0)
      Assert Equals(B.and(0xffffff00, 0xffffff), 0xffff00)
    End
    It returns bitwise AND (random)
      Assert Equals(B.and(-1296912273, -1904774433), -2110640049)
      Assert Equals(B.and(432461732, -859843378), 143053956)
      Assert Equals(B.and(2098863212, 959746948), 957353988)
      Assert Equals(B.and(144789504, -1435475015), 136331264)
      Assert Equals(B.and(-1325876821, -209876503), -1334277719)
      Assert Equals(B.and(-484132304, 491371309), 16824864)
      Assert Equals(B.and(-1787481070, 1602359046), 352322562)
      Assert Equals(B.and(-516431469, 1421177042), 1077239954)
      Assert Equals(B.and(-2028633248, 1046228473), 101974368)
      Assert Equals(B.and(764178285, 2068092473), 688129577)
    End
  End

  Describe .or()
    It returns bitwise OR
      Assert Equals(B.or(0, 0), 0)
      Assert Equals(B.or(0xffffffff, 0), 0xffffffff)
      Assert Equals(B.or(0xffffffff, 0xffffffff), 0xffffffff)
      Assert Equals(B.or(0xf0f0f0f0, 0xf0f0f0f), 0xffffffff)
      Assert Equals(B.or(0xf0f0f0f0, 0xf0f0f0f0), 0xf0f0f0f0)
      Assert Equals(B.or(0xffff0000, 0xffff), 0xffffffff)
      Assert Equals(B.or(0xff000000, 0xff), 0xff0000ff)
      Assert Equals(B.or(0xffffff00, 0xffffff), 0xffffffff)
    End
    It returns bitwise OR (random)
      Assert Equals(B.or(173374042, -686154780), -547390466)
      Assert Equals(B.or(988002410, 1611007623), 2062008047)
      Assert Equals(B.or(1617121838, 2063766753), 2070140655)
      Assert Equals(B.or(-68314761, -1067373081), -68305417)
      Assert Equals(B.or(2110784177, 1692066345), 2111496889)
      Assert Equals(B.or(-2063323858, -1250703135), -1250431505)
      Assert Equals(B.or(-555502256, 1817484023), -17317897)
      Assert Equals(B.or(1840020982, 1846433830), 1873706486)
      Assert Equals(B.or(-1642487163, -2106395568), -1636043051)
      Assert Equals(B.or(1706960204, 865619605), 2008969181)
    End
  End

  Describe .xor()
    It returns bitwise XOR
      Assert Equals(B.xor(0, 0), 0)
      Assert Equals(B.xor(0xffffffff, 0), 0xffffffff)
      Assert Equals(B.xor(0xffffffff, 0xffffffff), 0)
      Assert Equals(B.xor(0xf0f0f0f0, 0xf0f0f0f), 0xffffffff)
      Assert Equals(B.xor(0xf0f0f0f0, 0xf0f0f0f0), 0)
      Assert Equals(B.xor(0xffff0000, 0xffff), 0xffffffff)
      Assert Equals(B.xor(0xff000000, 0xff), 0xff0000ff)
      Assert Equals(B.xor(0xffffff00, 0xffffff), 0xff0000ff)
    End
    It returns bitwise XOR (random)
      Assert Equals(B.xor(271738232, 581446732), 848972084)
      Assert Equals(B.xor(-1493178930, 1597520677), -104341781)
      Assert Equals(B.xor(-1605313579, -452835553), 1163041994)
      Assert Equals(B.xor(-2010996666, 1805365375), -474410951)
      Assert Equals(B.xor(189013461, 1428653660), 1583586185)
      Assert Equals(B.xor(927050540, 304702767), 627625475)
      Assert Equals(B.xor(-651395973, 726399460), -228096609)
      Assert Equals(B.xor(292595176, -1074885945), -1365364945)
      Assert Equals(B.xor(1544212087, -476653766), -1080288947)
      Assert Equals(B.xor(838539477, 1024734483), 217001414)
    End
  End
End
