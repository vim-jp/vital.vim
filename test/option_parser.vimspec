function! s:permutation(args) abort
  if len(a:args) <= 1
    return [[a:args[0]]]
  endif

  let ret = []
  for a in a:args
    let xs = filter(copy(a:args), 'type(v:val) != type(a) || v:val != a')
    let perms = s:permutation(xs)
    call extend(ret, map(perms, '[a] + v:val'))
    unlet a
  endfor
  return ret
endfunction

function! CompleteTest(optlead, cmdline, pos) abort
  return filter(['sushi', 'yakiniku', 'yakitori'], 'a:optlead == "" ? 1 : (v:val =~# "^" . a:optlead)')
endfunction

function! CompleteTest2(optlead, cmdline, pos) abort
  return filter(['inu', 'manbou', 'momonga'], 'a:optlead == "" ? 1 : (v:val =~# "^" . a:optlead)')
endfunction

function! CompleteUnknownOptionTest(optlead, cmdline, pos) abort
  return filter(['vim', 'vimmer', 'kowai'], 'a:optlead == "" ? 1 : (v:val =~# "^" . a:optlead)')
endfunction

Describe OptionParser

  Before all
    let g:O = vital#of('vital').import('OptionParser')
  End

  After all
    unlet! g:O
  End

  Describe .new()
    It makes parser object
      let o = g:O.new()
      let func_type = type(function('empty'))
      Assert has_key(o, 'options')
      Assert Equals(type(o.options), type({}))
      Assert has_key(o, 'on')
      Assert Equals(type(o.on), func_type)
      Assert has_key(o, 'parse')
      Assert Equals(type(o.parse), func_type)
      Assert has_key(o, 'help')
      Assert Equals(type(o.help), func_type)
      Assert has_key(o, 'complete')
      Assert Equals(type(o.help), func_type)
    End
  End

  Describe obj.on()
    It defines "--hoge" options with on()
      let o = g:O.new()
      call o.on('--hoge', 'huga')
      Assert has_key(o.options, 'hoge')
      Assert Equals(o.options.hoge, {'description': 'huga', 'definition': '--hoge'})
      " non alphabetical characters
      call o.on('--!"#$?', 'huga')
      Assert has_key(o.options, '!"#$?')
      Assert Equals(o.options['!"#$?'], {'description': 'huga', 'definition': '--!"#$?'})
    End

    It defines short option
      let o = g:O.new()

      " non alphabetical characters
      for na in ['a', 'b', 'c', '1', '2', '3']
        call o.on('--' . na, 'huga', {'short' : '-' . na})
        Assert has_key(o.options[na], 'short_option_definition')
        Assert Equals(o.options[na].short_option_definition, '-'.na)
      endfor
    End

    It defines --hoge=VALUE option
      let o = g:O.new()

      call o.on('--hoge=VALUE', 'huga')
      Assert has_key(o.options, 'hoge')
      Assert Equals(o.options.hoge, {'description': 'huga', 'definition': '--hoge=VALUE', 'has_value': 1})
    End

    It defines --[no-]hoge option
      let o = g:O.new()
      call o.on('--[no-]hoge', 'huga')
      Assert has_key(o.options, 'hoge')
      Assert Equals(o.options.hoge, {'description': 'huga', 'definition': '--[no-]hoge', 'no': 1})
    End

    It can chain definitions of options
      let o = g:O.new()
      call o.on('--hoge', '')
          \.on('--huga', '')
          \.on('--piyo', '')
          \.on('--poyo', '')
      Assert has_key(o.options, 'hoge')
      Assert has_key(o.options, 'huga')
      Assert has_key(o.options, 'piyo')
      Assert has_key(o.options, 'poyo')
    End

    It occurs an error when invalid option name is specified
      let o = g:O.new()
      Throws o.on('invalid_name', '')
      Throws o.on('--invalid name', '')
    End

    It occurs an error when invalid short option name is specified
      let o = g:O.new()
      Throws o.on('--valid', '', {'short' : '-but_invalid'})
      Throws o.on('--valid', '', {'short' : '--'})
      Throws o.on('--valid', '', {'short' : 'a'})
      Throws o.on('--valid', '', {'short' : '-='})
      Throws o.on('--valid', '', {'short' : '-'})
    End

    It sets default values if specified
      let o = g:O.new()
      call o.on('--hoge', '')
          \.on('--huga', '', {'default' : 3})
          \.on('--tsura', '', 'aaa')
          \.on('--poyo', 'a', 3)
      Assert ! has_key(o.options.hoge, 'default_value')
      Assert has_key(o.options.huga, 'default_value')
      Assert Equals(o.options.huga.default_value, 3)
      Assert has_key(o.options.tsura, 'default_value')
      Assert Equals(o.options.tsura.default_value, 'aaa')
      Assert has_key(o.options.poyo, 'default_value')
      Assert Equals(o.options.poyo.default_value, 3)
    End

    It sets function for completion with "completion" key
      let o = g:O.new()
      call o.on('--hoge', '', {'completion' : 'file'})
          \.on('--huga', '', {'completion' : function('CompleteTest')})
          \.on('--piyo', '')
      Assert has_key(o.options.hoge, 'completion')
      Assert has_key(o.options.huga, 'completion')
      Assert ! has_key(o.options.piyo, 'completion')
      Assert Equals(type(o.options.hoge.completion), type(function('empty')))
      Assert Equals(type(o.options.huga.completion), type(function('empty')))
    End

  End

  Describe obj.parse()

    It parses empty argument
      let o = g:O.new()
      Assert Equals(o.parse(''), {'__unknown_args__' : []})
    End

    It deals with <bang>
      let o = g:O.new()
      Assert Equals(o.parse('', '!'), {'__unknown_args__' : [], '__bang__' : '!'})
    End

    It deals with <count>
      let o = g:O.new()
      Assert Equals(o.parse('', 3), {'__unknown_args__' : [], '__count__' : 3})
    End

    It deals with <reg>
      let o = g:O.new()
      Assert Equals(o.parse('', 'g'), {'__unknown_args__' : [], '__reg__' : 'g'})
    End

    It deals with <range>
      let o = g:O.new()
      Assert Equals(o.parse('', [1, 100]), {'__unknown_args__' : [], '__range__' : [1, 100]})
    End

    It deals with command special options regardless of the order of and number of arguments
      let o = g:O.new()
      " count command
      let cands = ['g', 42, '!']
      let perms = s:permutation(cands)
      for p in perms
        Assert Equals(call(o.parse, [''] + p, o), {'__unknown_args__' : [], '__count__' : 42, '__bang__' : '!', '__reg__' : 'g'})
      endfor

      " range command
      let cands = ['g', [1, 100], '!']
      let perms = s:permutation(cands)
      for p in perms
        Assert Equals(call(o.parse, [''] + p, o), {'__unknown_args__' : [], '__range__' : [1, 100], '__bang__' : '!', '__reg__' : 'g'})
      endfor
    End

    It parses --hoge as 'hoge' : 1
      let o = g:O.new()
      call o.on('--hoge', 'huga')
      Assert Equals(o.parse('--hoge'), {'__unknown_args__' : [], 'hoge' : 1})
    End

    It parses --hoge=VALUE as 'hoge' : 'VALUE' and echoes an error when VALUE is omitted
      let o = g:O.new()
      call o.on('--hoge=VALUE', 'huga')
      Assert Equals(o.parse('--hoge=huga'), {'__unknown_args__' : [], 'hoge' : 'huga'})
      Throws g:O.parse('--hoge')
    End

    It parses --[no-]hoge as 'hoge' : 0 or 1
      let o = g:O.new()
      call o.on('--[no-]hoge', 'huga')
      Assert Equals(o.parse('--no-hoge'), {'__unknown_args__' : [], 'hoge' : 0})
      Assert Equals(o.parse('--hoge'), {'__unknown_args__' : [], 'hoge' : 1})
    End

    It parses short option -h as 'hoge'
      let o = g:O.new()
      call o.on('--hoge', 'huga', {'short' : '-h'})
      Assert Equals(o.parse('-h'), {'__unknown_args__' : [], 'hoge' : 1})
      Assert Equals(o.parse('--hoge'), {'__unknown_args__' : [], 'hoge' : 1})
    End

    It parses default values if they are set in on() and they are not specified by user
      let o = g:O.new()
      call o.on('--hoge', '', {'default' : 3.14})
      call o.on('--huga', '', 'default value')
      Assert Equals(o.parse(''), {'__unknown_args__' : [], 'hoge' : 3.14, 'huga' : 'default value'})
      Assert Equals(o.parse('--hoge --huga --piyo'), {'__unknown_args__' : ['--piyo'], 'hoge' : 1, 'huga' : 1})
    End

    It doesn't parse arguments not defined with on()
      let o = g:O.new()
      call o.on('--foo', 'huga')
      call o.on('--bar=VALUE', 'huga')
      call o.on('--[no-]baz', 'huga')
      Assert Equals(o.parse('--hoge'), {'__unknown_args__' : ['--hoge']})
      Assert Equals(o.parse('--huga=poyo'), {'__unknown_args__' : ['--huga=poyo']})
      Assert Equals(o.parse('--no-poyo'), {'__unknown_args__' : ['--no-poyo']})
      Assert Equals(o.parse('--hoge --huga=poyo --no-poyo'), {'__unknown_args__' : ['--hoge', '--huga=poyo', '--no-poyo']})
    End

    It parses all argument types at one time regardless of the order of arguments
      let o = g:O.new()
      call o.on('--hoge', '')
      call o.on('--huga=VALUE', '')
      call o.on('--[no-]poyo', '')
      call o.on('--piyo', '', {'default' : 'aaa'})
      let args = ['--hoge', '--huga=foo', '--no-poyo', 'unknown_arg']
      let perms = s:permutation(args)
      for p in perms
        Assert Equals(o.parse(join(p, ' ')),
              \ {'__unknown_args__' : ['unknown_arg'], 'hoge' : 1, 'huga' : 'foo', 'poyo' : 0, 'piyo' : 'aaa'})
      endfor
    End

    It parses all options defined with on() and command options at one time regardless of the order of arguments
      let o = g:O.new()
      call o.on('--hoge', '')
      call o.on('--huga=VALUE', '')
      call o.on('--tsura', '', {'short' : '-t'})
      call o.on('--[no-]poyo', '')
      call o.on('--piyo', '', {'default' : 42})
      call o.on('--puyo', '', 3.14)
      let args = map(s:permutation(['--hoge', '--huga=foo', '--no-poyo', '-t', 'unknown_arg']), 'join(v:val, " ")')
      let opts_count = s:permutation(['g', 42, '!'])
      let opts_range = s:permutation(['g', [1, 100], '!'])

      " command with <count>
      for a in args
        for oc in opts_count
          Assert Equals(call(o.parse, [a] + oc, o),
                \ {
                \   '__unknown_args__' : ['unknown_arg'],
                \   '__count__' : 42,
                \   '__bang__' : '!',
                \   '__reg__' : 'g',
                \   'hoge' : 1,
                \   'huga' : 'foo',
                \   'tsura' : 1,
                \   'poyo' : 0,
                \   'piyo' : 42,
                \   'puyo' : 3.14,
                \ })
        endfor
      endfor

      " command with <range>
      for a in args
        for or in opts_range
          Assert Equals(call(o.parse, [a] + or, o),
                \ {
                \   '__unknown_args__' : ['unknown_arg'],
                \   '__range__' : [1, 100],
                \   '__bang__' : '!',
                \   '__reg__' : 'g',
                \   'hoge' : 1,
                \   'huga' : 'foo',
                \   'tsura' : 1,
                \   'poyo' : 0,
                \   'piyo' : 42,
                \   'puyo' : 3.14,
                \ })
        endfor
      endfor
    End

    It can parse some non alphabetical names and keys
      let o = g:O.new()
      call o.on('--''!"#$=VALUE', '')
      Assert Equals(o.parse('--''!"#$=''hoge'''), {'__unknown_args__' : [], '''!"#$' : "'hoge'"})
    End
  End

  Describe obj.help()

    It returns help message
      let o = g:O.new()
      call o.on('--hoge=VALUE', 'description of hoge, must have value')
      call o.on('--foo', 'description of foo')
      call o.on('--[no-]bar', 'description of bar, contradictable')
      call o.on('--baz', 'description of baz, has short option', {'short' : '-b'})
      call o.on('--qux', 'description of qux, has default value', {'default' : 3.14})

      Assert Equals(o.help(), join([
            \   "Options:",
            \   "  --foo        : description of foo",
            \   "  --baz, -b    : description of baz, has short option",
            \   "  --hoge=VALUE : description of hoge, must have value",
            \   "  --[no-]bar   : description of bar, contradictable",
            \   "  --qux        : description of qux, has default value (DEFAULT: 3.14)",
            \ ], "\n"))
    End

    It returns title-only help if no option is defined
      let o = g:O.new()
      Assert Equals(o.help(), "Options:\n")
    End
  End

  Describe obj.complete()
    It completes long options
        let o = g:O.new()
        call o.on('--[no-]huga=VALUE', '', {'short' : '-h', 'completion' : function('CompleteTest')})
             \.on('--hoge', '')
             \.on('--piyo', '', {'short' : '-p'})
             \.on('--tsura=VALUE', '', {'completion' : function('CompleteTest2')})
             \.on('--[no-]poyo', '')
        let o.unknown_options_completion = function('CompleteUnknownOptionTest')
        Assert Equals(o.complete('--', 'Hoge --', 7), ['--tsura=', '--hoge', '--huga=', '--no-huga=', '--piyo', '--poyo', '--no-poyo'])
        Assert Equals(o.complete('--h', 'Hoge --h', 8), ['--hoge', '--huga='])
        Assert Equals(o.complete('--hu', 'Hoge --hu', 9), ['--huga='])
        Assert Equals(o.complete('--ho', 'Hoge --ho', 9), ['--hoge'])
        Assert Equals(o.complete('--p', 'Hoge --p', 8), ['--piyo', '--poyo'])
        Assert Equals(o.complete('--po', 'Hoge --po', 9), ['--poyo'])
        Assert Equals(o.complete('--pi', 'Hoge --pi', 9), ['--piyo'])
        Assert Equals(o.complete('--f', 'Hoge --f', 8), [])
        Assert Equals(o.complete('--no', 'Hoge --no', 9), ['--no-huga=', '--no-poyo'])
    End

    It completes short options
        let o = g:O.new()
        call o.on('--[no-]huga=VALUE', '', {'short' : '-h', 'completion' : function('CompleteTest')})
             \.on('--hoge', '')
             \.on('--piyo', '', {'short' : '-p'})
             \.on('--tsura=VALUE', '', {'completion' : function('CompleteTest2')})
             \.on('--[no-]poyo', '')
        let o.unknown_options_completion = function('CompleteUnknownOptionTest')
        Assert Equals(o.complete('-', 'Hoge -', 6), ['-h=', '-no-h=', '-p'])
        Assert Equals(o.complete('-h', 'Hoge -h', 7), ['-h='])
        Assert Equals(o.complete('-p', 'Hoge -p', 7), ['-p'])
        Assert Equals(o.complete('-f', 'Hoge -f', 7), [])
    End

    It completes values of options with specified complete function
        let o = g:O.new()
        call o.on('--[no-]huga=VALUE', '', {'short' : '-h', 'completion' : function('CompleteTest')})
             \.on('--hoge', '')
             \.on('--piyo', '', {'short' : '-p'})
             \.on('--tsura=VALUE', '', {'completion' : function('CompleteTest2')})
             \.on('--[no-]poyo', '')
        let o.unknown_options_completion = function('CompleteUnknownOptionTest')
        Assert Equals(o.complete('--huga=', 'Hoge --huga=', 12), ['--huga=sushi', '--huga=yakiniku', '--huga=yakitori'])
        Assert Equals(o.complete('--huga=yaki', 'Hoge --hoge=yaki', 16), ['--huga=yakiniku', '--huga=yakitori'])
        Assert Equals(o.complete('--tsura=', 'Hoge --tsura=', 13), ['--tsura=inu', '--tsura=manbou', '--tsura=momonga'])
        Assert Equals(o.complete('--hoge=', 'Hoge --hoge=', 12), [])
    End

    It completes unknown argument if "unknown_options_completion" is specified
        let o = g:O.new()
        call o.on('--[no-]huga=VALUE', '', {'short' : '-h', 'completion' : function('CompleteTest')})
             \.on('--hoge', '')
             \.on('--piyo', '', {'short' : '-p'})
             \.on('--tsura=VALUE', '', {'completion' : function('CompleteTest2')})
             \.on('--[no-]poyo', '')
        let o.unknown_options_completion = function('CompleteUnknownOptionTest')
        Assert Equals(o.complete('', 'Hoge ', 5), ['vim', 'vimmer', 'kowai'])
        Assert Equals(o.complete('vim', 'Hoge vim', 8), ['vim', 'vimmer'])
    End
  End

End
