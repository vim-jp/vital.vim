let s:V = vital#of('vital')
let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')

Describe System.Filepath
  let s:FP = s:V.import('System.Filepath')

  Describe .abspath()
    It should return {path} if {path} is already an absolute path
      let abspath = s:FP.join(getcwd(), 'foo.txt')
      let ret = s:FP.abspath(abspath)
      Assert Equals(ret, abspath)
      Assert Same(ret, abspath)
    End

    It should return an absolute path of {path} which exists
      let relpath = 'foo.txt'
      call writefile(['foo'], relpath)
      let ret = s:FP.abspath(relpath)
      let exp = s:FP.join(getcwd(), relpath)
      Assert NotSame(ret, relpath)
      Assert NotEquals(ret, relpath)
      Assert Equals(ret, exp)
      call delete(relpath)
    End

    It should return an absolute path of {path} which does not exist
      let relpath = s:FP.join('hoge', 'bar.txt')
      let ret = s:FP.abspath(relpath)
      Assert NotSame(ret, relpath)
      Assert NotEquals(ret, relpath)
      " the behavior of ':p' is not defined for non existing file
      " thus opposite approach is required
      Assert Equals(fnamemodify(ret, ':~:.'), relpath)
    End
  End

  Describe .relpath()
    It should return {path} if {path} is already a relative path
      let relpath = 'foo.txt'
      let ret = s:FP.relpath(relpath)
      Assert Equals(ret, relpath)
      Assert Same(ret, relpath)
    End

    It should return a relative path of {path}
      let abspath = s:FP.join(getcwd(), 'foo.txt')
      let ret = s:FP.relpath(abspath)
      Assert NotSame(ret, abspath)
      Assert NotEquals(ret, abspath)
      Assert Equals(ret, fnamemodify(abspath, ':~:.'))
    End
  End

  Describe .unixpath()
    It should substitute backslashes in {path} to slashes
      let path = 'C:\Foo\Bar\Hoge.txt'
      let ret = s:FP.unixpath(path)
      Assert NotEquals(ret, path)
      Assert NotSame(ret, path)
      Assert Equals(ret, 'C:/Foo/Bar/Hoge.txt')
    End
  End

  Describe .winpath()
    It should substitute slashes in {path} to backslashes
      let path = '/Foo/Bar/Hoge.txt'
      let ret = s:FP.winpath(path)
      Assert NotEquals(ret, path)
      Assert NotSame(ret, path)
      Assert Equals(ret, '\Foo\Bar\Hoge.txt')
    End
  End

  Describe .realpath()
    if !s:is_windows
      It should return an unix path of {path} in non Windows OS
        let path = 'C:\Foo\Bar\Hoge.txt'
        let ret = s:FP.realpath(path)
        Assert NotEquals(ret, path)
        Assert NotSame(ret, path)
        Assert Equals(ret, 'C:/Foo/Bar/Hoge.txt')

        let path = '/Foo/Bar/Hoge.txt'
        let ret = s:FP.realpath(path)
        Assert Equals(ret, path)
        Assert Same(ret, path)
      End
    elseif exists('&shellslash')
      Before
        let saved_shellslash = &shellslash
      End
      After
        let &shellslash = saved_shellslash
      End
      It should return an unix path of {path} in Windows with '+shellslash' and shellslash
        set shellslash

        let path = 'C:\Foo\Bar\Hoge.txt'
        let ret = s:FP.realpath(path)
        Assert NotEquals(ret, path)
        Assert NotSame(ret, path)
        Assert Equals(ret, 'C:/Foo/Bar/Hoge.txt')

        let path = '/Foo/Bar/Hoge.txt'
        let ret = s:FP.realpath(path)
        Assert Equals(ret, path)
        Assert Same(ret, path)
      End
      It should return a windows path of {path} in Windows with '+shellslash' and noshellslash
        set noshellslash

        let path = 'C:\Foo\Bar\Hoge.txt'
        let ret = s:FP.realpath(path)
        Assert Equals(ret, path)
        Assert Same(ret, path)

        let path = '/Foo/Bar/Hoge.txt'
        let ret = s:FP.realpath(path)
        Assert NotEquals(ret, path)
        Assert NotSame(ret, path)
        Assert Equals(ret, '\Foo\Bar\Hoge.txt')
      End
    else
      It should return a windows path of {path} in Windows with '-shellslash'
        let path = 'C:\Foo\Bar\Hoge.txt'
        let ret = s:FP.realpath(path)
        Assert Equals(ret, path)
        Assert Same(ret, path)

        let path = '/Foo/Bar/Hoge.txt'
        let ret = s:FP.realpath(path)
        Assert NotEquals(ret, path)
        Assert NotSame(ret, path)
        Assert Equals(ret, '\Foo\Bar\Hoge.txt')
      End
    endif
  End

  Describe .is_root_directory()
    if !s:is_windows
      It is true only if the given string directly represents root dir of the file system (Non Windows)
        let ret = s:FP.is_root_directory('/')
        Assert ret
        let ret = s:FP.is_root_directory('/aaa/..')
        Assert !ret
        let ret = s:FP.is_root_directory('/aaa')
        Assert !ret
        let ret = s:FP.is_root_directory('/aaa/bbb')
        Assert !ret
      End
    else
      It is true only if the given string directly represents root dir of the file system (Windows)
        let ret = s:FP.is_root_directory('C:/')
        Assert ret
        let ret = s:FP.is_root_directory('C:\')
        Assert ret
        let ret = s:FP.is_root_directory('C:/aaa/..')
        Assert !ret
        let ret = s:FP.is_root_directory('C:/aaa')
        Assert !ret
        let ret = s:FP.is_root_directory('C:/aaa/bbb')
        Assert !ret
      End
    endif
  End

  Describe .contains()
    if !s:is_windows
      It should return non-zero if /foo/bar contains /foo/bar (Non Windows)
        let ret = s:FP.contains('/foo/bar', '/foo/bar')
        Assert ret
      End
      It should return non-zero if /foo/bar contains /foo (Non Windows)
        let ret = s:FP.contains('/foo/bar', '/foo')
        Assert ret
      End
      It should return zero if /foo contains /foo/bar (Non Windows)
        let ret = s:FP.contains('/foo', '/foo/bar')
        Assert !ret
      End
      It should return non-zero if /foo contains /foo (Non Windows)
        let ret = s:FP.contains('/foo', '/foo')
        Assert ret
      End
      It should return non-zero if /foo contains / (Non Windows)
        let ret = s:FP.contains('/foo', '/')
        Assert ret
      End
      It should return zero if / contains /foo (Non Windows)
        let ret = s:FP.contains('/', '/foo')
        Assert !ret
      End
      It should return non-zero if / contains / (Non Windows)
        let ret = s:FP.contains('/', '/')
        Assert ret
      End
      It should return zero for empty paths (Non Windows)
        let ret = s:FP.contains('', '')
        Assert !ret
        let ret = s:FP.contains('/', '')
        Assert !ret
        let ret = s:FP.contains('', '/')
        Assert !ret
      End
      It should ignore the last directory separator in {base} (Non Windows)
        let ret = s:FP.contains('/foo', '/foo/')
        Assert ret
      End

      Context in case-sensitive system
        It should not ignore case
          let ret = s:FP.contains('/etc/x11/xinit', '/etc/X11')
          Assert !ret
        End
      End
    else
      It should return non-zero if C:\foo\bar contains C:\foo\bar (Windows)
        let ret = s:FP.contains('C:\foo\bar', 'C:\foo\bar')
        Assert ret
      End
      It should return non-zero if C:\foo\bar contains C:\foo (Windows)
        let ret = s:FP.contains('C:\foo\bar', 'C:\foo')
        Assert ret
      End
      It should return zero if C:\foo contains C:\foo\bar (Windows)
        let ret = s:FP.contains('C:\foo', 'C:\foo\bar')
        Assert !ret
      End
      It should return non-zero if C:\foo contains C:\foo (Windows)
        let ret = s:FP.contains('C:\foo', 'C:\foo')
        Assert ret
      End
      It should return non-zero if C:\foo contains C:\ (Windows)
        let ret = s:FP.contains('C:\foo', 'C:\')
        Assert ret
      End
      It should return zero if C:\ contains C:\foo (Windows)
        let ret = s:FP.contains('C:\', 'C:\foo')
        Assert !ret
      End
      It should return non-zero if C:\ contains C:\ (Windows)
        let ret = s:FP.contains('C:\', 'C:\')
        Assert ret
      End
      It should return zero for empty paths (Windows)
        let ret = s:FP.contains('', '')
        Assert !ret
        let ret = s:FP.contains('C:\', '')
        Assert !ret
        let ret = s:FP.contains('', 'C:\')
        Assert !ret
      End
      It should return non-zero if C:\ contains C:\ (Windows)
        let ret = s:FP.contains('C:\', 'C:\')
        Assert ret
      End
      It should ignore the last directory separator in {base} (Windows)
        let ret = s:FP.contains('C:\foo', 'C:\foo\')
        Assert ret
      End

      Context in case-insensitive system
        It should ignore case
          let ret = s:FP.contains('c:\program files\Vim', 'C:\Program Files')
          Assert ret
        End
      End
    endif
  End
End
