Describe Data.Optional
  Before all
    let O = vital#of('vital').import('Data.Optional')
  End

  Describe .none()
    It returns invalid optional value
      let o = O.none()
      Assert True(O.empty(o))
      Assert False(O.exists(o))
      Assert True(O.is_optional(o))
    End
  End

  Describe .some()
    It returns valid optional value from the argument
      let o = O.some(42)
      Assert False(O.empty(o))
      Assert True(O.exists(o))
    End
  End

  Describe .is_optional()
    It checks the argument is an optional value
      let o = O.none()
      let o2 = O.some(42)

      Assert True(O.is_optional(o))
      Assert True(O.is_optional(o2))
      Assert False(O.is_optional(42))
    End
  End

  Describe .empty()
    It checks the optional value is invalid
      let o = O.none()
      let o2 = O.some(42)

      Assert True(O.empty(o))
      Assert False(O.empty(o2))
    End
  End

  Describe .exists()
    It checks the optional value is valid
      let o = O.none()
      let o2 = O.some(42)

      Assert False(O.exists(o))
      Assert True(O.exists(o2))
    End
  End

  Describe .get_or()
    It returns the content of optional value
      let o = O.some(42)
      Assert Equals(O.get_or(o, -1), 42)
    End

    It returns the second argument as alternative if the first argument is invalid
      let o = O.none()
      Assert Equals(O.get_or(o, -1), -1)
    End
  End

  Describe .get()
    It returns the content of optional value
      let o = O.some(42)
      Assert Equals(O.get(o), 42)
    End

    It throws an exception if the value is invalid
      let o = O.none()
      Throws /^vital: Data.Optional:/ O.get(o)
    End
  End

  Describe .get_unsafe()
    It accesses to the content of optional value directly
      let o = O.some(42)
      Assert Equals(O.get_unsafe(o), 42)
    End

    It causes internal error
      let o = O.none()
      Throws /.*/ O.get_usafe(o)
    End
  End

  Describe .set()
    It sets a value to the optional value
      let o = O.none()
      call O.set(o, 42)

      Assert True(O.exists(o))
      Assert Equals(O.get(o), 42)
    End
  End

  Describe .unset()
    It removes a value from the optional value
      let o = O.some(42)
      call O.unset(o)

      Assert True(O.empty(o))
    End

    It does nothing when the optional value is already invalid
      let o = O.none()
      call O.unset(o)

      Assert True(O.empty(o))
    End
  End

  Describe .has()
    It checks the type of content of the value
      let o1 = O.some(42)
      let o2 = O.some("aaa")
      let o3 = O.some(3.14)

      Assert True(O.has(o1, type(0)))
      Assert True(O.has(o2, type('')))
      Assert True(O.has(o3, type(1.0)))

      Assert False(O.has(o1, type('')))
      Assert False(O.has(o2, type(1.0)))
      Assert False(O.has(o3, type(0)))
    End
  End

  Describe .apply()
    Before all
      function! TestFunc(...)
        return 1
      endfunction
    End

    It applies optional values to the function if all values are valid
      let o1 = O.some(42)
      let o2 = O.some("aaa")
      let o3 = O.some(3.14)

      let result1 = O.apply('TestFunc', o1, o2, o3)
      Assert True(O.exists(result1))
      Assert Equals(O.get(result1), 1)

      let result2 = O.apply('TestFunc', O.apply('TestFunc', o1, o2), O.apply('TestFunc', o3))
      Assert True(O.exists(result2))
      Assert Equals(O.get(result2), 1)
    End

    It doesn't apply optional values to the function if any value is invalid
      let o1 = O.some(42)
      let o3 = O.some(3.14)

      let result = O.apply('TestFunc', o1, O.none(), o3, O.none())
      Assert True(O.empty(result))
    End

    It throws an exception when non-optional value is passed
      Throws /^vital: Data.Optional:/ O.apply('TestFunc', O.some(42), O.none(), "non-optional value")
    End
  End

  Describe .bind()
    Before all
      function! Div(a, b)
        " Note:
        " This is workaround because 'O' is defined in outer 'Before all'
        " and it can't be refered here.
        let O = vital#of('vital').import('Data.Optional')

        if a:b == 0
          return O.none()
        else
          return O.some(a:a / a:b)
        endif
      endfunction
    End

    It applies optional values to monadic function if all values are valid
      let x = O.some(42)
      let y = O.some(21)
      let z = O.some(0)

      let result = O.bind('Div', x, y)
      Assert True(O.exists(result))
      Assert Equals(O.get(result), 42 / 21)

      let result = O.bind('Div', x, z)
      Assert True(O.empty(result))

      let result = O.bind('Div', O.bind('Div', x, O.some(2)), y)
      Assert True(O.exists(result))
      Assert Equals(O.get(result), 42 / 2 / 21)
    End

    It doesn't apply optional values to the function if any value is invalid
      let x = O.some(42)

      let result = O.bind('Div', x, O.none())
      Assert True(O.empty(result))

      let result = O.bind('Div', O.some(42), O.none())
      Assert True(O.empty(result))

      let result = O.bind('Div', O.bind('Div', x, O.some(2)), O.none())
      Assert True(O.empty(result))

      let result = O.bind('Div', O.bind('Div', O.none(), O.some(2)), x)
      Assert True(O.empty(result))
    End

    It throws an exception when non-optional value is passed
      Throws /^vital: Data.Optional:/ O.bind('Div', O.some(42), O.none(), "non-optional value")
    End
  End

  Describe .flatten()
    It returns flattened optional value
      let o = O.none()
      let result = O.flatten(o)
      Assert True(O.is_optional(result))
      Assert True(O.empty(result))

      let o = O.some(42)
      let result = O.flatten(o)
      Assert True(O.is_optional(result))
      Assert True(O.exists(result))
      Assert Equals(O.get(result), 42)

      let o = O.some(O.some(O.some(42)))
      let result = O.flatten(o)
      Assert True(O.is_optional(result))
      Assert True(O.exists(result))
      Assert Equals(O.get(result), 42)

      let o = O.some(O.some(O.some(O.none())))
      let result = O.flatten(o)
      Assert True(O.is_optional(result))
      Assert True(O.empty(result))
    End

    It can flatten optional value with specified limit
      let o = O.some(O.some(O.some(O.some(42))))
      let result = O.flatten(o, 2)
      Assert True(O.is_optional(result))
      Assert True(O.is_optional(O.get(result)))
      Assert True(!O.is_optional(O.get(O.get(result))))
      Assert Equals(O.get(O.get(result)), 42)

      let o = O.some(O.some(O.some(42)))
      let result = O.flatten(o, 1000)
      Assert True(O.is_optional(result))
      Assert True(!O.is_optional(O.get(result)))
      Assert Equals(O.get(result), 42)
    End
  End

  Describe .echo()
    It throws no exception
      call O.echo(O.some(42))
      call O.echo(O.none())
      call O.echo(O.some(42), 'Error')
      call O.echo(O.none(), 'Warning')
    End
  End
End
