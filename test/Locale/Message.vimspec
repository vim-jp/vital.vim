scriptencoding utf-8

let s:text_path = 'test/Locale/MessageText/%s.txt'

Describe Locale.Message
  Before all
    let M = vital#of('vital').import('Locale.Message')
  End

  Before each
    language message C
  End

  Describe .get_lang()
    It returns current language of message
      language message ja_JP.UTF-8
      Assert Equals(M.get_lang(), 'ja')
    End
    It returns 'en' if current language is 'C'
      language message C
      Assert Equals(M.get_lang(), 'en')
    End
  End

  Describe .new()
    It makes a new Locale.Message object
      let m = M.new(s:text_path)
      Assert HasKey(m, 'get')
      Assert HasKey(m, 'load')
    End
  End

  Describe .get()
    Before each
      language message ja_JP.UTF-8
      let self.m = M.new(s:text_path)
    End
    It returns translated text if it exists
      Assert Equals(self.m.get('hello'), 'こんにちは')
    End
    It returns original text if it doesn't exist
      Assert Equals(self.m.get('world'), 'world')
    End
  End

  Describe ._()
    Before each
      language message ja_JP.UTF-8
      let self.m = M.new(s:text_path)
    End
    It can use like `get()`
      Assert Equals(self.m._('hello'), 'こんにちは')
      Assert Equals(self.m._('world'), 'world')
    End
  End

  Describe .load()
    Before each
      let self.m = M.new(s:text_path)
    End
    It loads specified language file
      let m = self.m
      call m.load('ja')
      Assert Equals(m.get('hello'), 'こんにちは')
      call m.load('fr')
      Assert Equals(m.get('hello'), 'ciao')
      call m.load('en')
      Assert Equals(m.get('hello'), 'hello')
    End
  End

  Describe .missing()
    It is called when the text is not found
      let m = M.new(s:text_path)
      call m.load('ja')
      Assert Equals(m.get('world'), 'world')
      function! m.missing(text) abort
        let self.__text = a:text
        return '世界'
      endfunction
      call m.load('ja')
      Assert Equals(m.get('world'), '世界')
      Assert Equals(m.__text, 'world')
    End
  End
End
