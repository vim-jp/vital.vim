*Vital/System/Job.txt*		A job wrapper for Vim 8 and Neovim

Maintainer:	lambdalisue		<lambdalisue@hashnote.net>
Support:	Vim 8.0.0134 and above
Support:	Neovim 0.1.7 and above


=============================================================================
CONTENTS					*Vital.System.Job-contents*

Introduction				|Vital.System.Job-introduction|
Function				|Vital.System.Job-function|
Instance				|Vital.System.Job-instance|


=============================================================================
INTRODUCTION					*Vital.System.Job-introduction*

*Vital.System.Job* is a wrapper module of job feature which has introduced
from Vim 8 or Neovim.


=============================================================================
FUNCTION					*Vital.System.Job-function*

						*Vital.System.Job.start()*
start({args}[, {options}])
	Start a new process with job feature of Vim 8 or Neovim and return a
	job instance (|Vital.System.Job-instance|).
	It throws exceptions when {args} is not a |List| instance, an empty
	list, or the first item of {args} is not executable.

	The following attributes are allowed in {options}.

	"on_stdout"	A callback called when the process output to stdout.
			The {msg} is a stdout data |List|.
	"on_stderr"	A callback called when the process output to stderr.
			The {msg} is a stderr data |List|.
	"on_exit"	A callback called when the process terminated.
			The {msg} is an exit status.

	Note that double underscore (__) attributes in {options} are used
	internally so users should NOT define such attributes on {options}.

	For example:
>
	function! s:on_stdout(job, msg, event) abort dict
	  let leading = get(self.stdout, -1, '')
	  silent! call remove(self.stdout, -1)
	  call extend(self.stdout, [leading . get(a:msg, 0, '')] + a:msg[1:])
	endfunction

	function! s:on_stderr(job, msg, event) abort dict
	  let leading = get(self.stderr, -1, '')
	  silent! call remove(self.stderr, -1)
	  call extend(self.stderr, [leading . get(a:msg, 0, '')] + a:msg[1:])
	endfunction

	function! s:on_exit(job, msg, event) abort dict
	  let self.exit_status = a:msg
	endfunction

	let job = s:Job.start(['git', 'status'], {
	      \ 'stdout': [],
	      \ 'stderr': [],
	      \ 'exit_status': -1,
	      \ 'on_stdout': function('on_stdout'),
	      \ 'on_stderr': function('on_stderr'),
	      \ 'on_exit': function('on_exit'),
	      \})
<

=============================================================================
INSTANCE					*Vital.System.Job-instance*

					*Vital.System.Job-instance.status()*
status()
	Return a status of the process. The value is one of

	"run"		The process is running.
	"dead"		The process has terminated or failed to open.

	Note that it returns "dead" instead of "fail" which is available in
	Vim's job_status() function while "fail" is not available on Unix
	system.

					*Vital.System.Job-instance.send()*
send({data})
	Send {data} to the process.

					*Vital.System.Job-instance.stop()*
stop()
	Send STOP single to terminate the process.

					*Vital.System.Job-instance.wait()*
wait([{timeout}])
	Wait until the process has terminated or {timeout} has passed.
	The unit of {timeout} is milliseconds.
	When user hit <C-c>, the process will terminate.


=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
