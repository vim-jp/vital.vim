*vital/Web/JSON.txt*			JSON parser written in pure Vim script.

Maintainer: mattn <mattn.jp@gmail.com>
            lambdalisue <lambdalisue@hashnote.net>

==============================================================================
CONTENTS				*Vital.Web.JSON-contents*

INTRODUCTION				|Vital.Web.JSON-introduction|
INTERFACE				|Vital.Web.JSON-interface|
  Consts				|Vital.Web.JSON-consts|
  Functions				|Vital.Web.JSON-functions|

==============================================================================
INTRODUCTION				*Vital.Web.JSON-introduction*

*Vital.Web.JSON* is JSON parser Library.

==============================================================================
INTERFACE				*Vital.Web.JSON-interface*

------------------------------------------------------------------------------
CONSTS					*Vital.Web.JSON-consts*

true					*Vital.Web.JSON.true*
	It is |v:true|. This is left for backward compatibility.

false					*Vital.Web.JSON.false*
	It is |v:false|. This is left for backward compatibility.

null					*Vital.Web.JSON.null*
	It is |v:null|. This is left for backward compatibility.

------------------------------------------------------------------------------
FUNCTIONS				*Vital.Web.JSON-functions*

encode({object}[, {settings}])		*Vital.Web.JSON.encode()*
	Encode an object into a JSON string.
	Vim values are converted as follows:
	   |Number|		decimal number
	   |Float|		floating point number
	   Float nan		"NaN"
	   Float inf		"Infinity"
	   Float -inf		"-Infinity"
	   |String|		in double quotes (possibly null)
	   |List|		as an array (possibly null); when
				used recursively: []
	   |Dict|		as an object (possibly null); when
				used recursively: {}
	   |Blob|		as an array of the individual bytes
	   v:false		"false"
	   v:true		"true"
	   v:none		"null"
	   v:null		"null"
	   |Funcref|		not possible, error
	   |job|		not possible, error
	   |channel|		not possible, error

	{settings} is a |Dictionary| which allows the following:

	'indent'
	The number of spaces used as an indentation. When the value is greater
	than 0, the encoded JSON will be formatted with the specified indent
	level. The default value is 0.
>
	echo s:JSON.encode({'a': 0, 'b': 1})
	" => '{"a":0,"b":1}'
	echo s:JSON.encode({'a': 0, 'b': 1}, {'indent': 2})
	" => '{
	"   "a": 0,
	"   "b": 1
	" }'
<
        'allow_nan'
        If 'allows_nan' is 0, it will raise an exception when serializing
        out of range float values (nan, inf, -inf).
        Otherwise 'NaN', 'Infinity' or '-Infinity' are used to represent these.
	The default value is 1.
	Note that NaN and Infinity are not the JSON standard.
>
	echo s:JSON.encode([0.0/0, 1.0/0, -1.0/0])
	" => [NaN,Infinity,-Infinity]
	echo s:JSON.encode([0.0/0], {'allow_nan': 0})
        " => vital: Web.JSON: Invalid float value: nan
<
        'ensure_ascii'
        If 'ensure_ascii' is 0, all characters without control-chars
        (0x01-0x1f) will be output as-is.
        Otherwise the output is guaranteed to have all incoming non-ASCII
        characters escaped.
	The default value is 0.
>
	echo s:JSON.encode(["foo", "bár", "\n"])
	" => '["foo","bár","\n"]'
	echo s:JSON.encode(["foo", "bár", "\n"], {'ensure_ascii': 1})
	" => '["foo","b\u00e1r","\n"]'
<
decode({json}[, {settings}])		*Vital.Web.JSON.decode()*
	Decode a JSON string into an object that vim can treat.
	{settings} is a |Dictionary| which allows the following:

        'allow_nan'
        If 'allows_nan' is 0, it will raise an exception when deserializing
        float constants ('NaN', 'Infinity', '-Infinity').
        Otherwise nan, inf or -inf are used to represent these.
	The default value is 1.
>
	echo s:JSON.decode('[NaN, Infinity, -Infinity]')
	" => [nan, inf, -inf]
	echo s:JSON.decode('[NaN]', {'allow_nan': 0})
	" => E121: Undefined variable: NaN
<

=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
