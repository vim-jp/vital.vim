*vital-data-string.txt*		string utilities library.

==============================================================================
CONTENTS				*Vital.Data.String-contents*

INTRODUCTION			|Vital.Data.String-introduction|
INTERFACE			|Vital.Data.String-interface|
  Functions			  |Vital.Data.String-functions|

==============================================================================
INTRODUCTION				*Vital.Data.String-introduction*

*Vital.Data.String* is String Utilities Library.
It provides some functions to manipulate |String|.

==============================================================================
INTERFACE				*Vital.Data.String-interface*
------------------------------------------------------------------------------
FUNCTIONS				*Vital.Data.String-functions*

replace({str}, {from}, {to})		*Vital.Data.String.replace()*
	Returns string replaced {from} to {to} from {str}.
>
	:echo String.replace("fooba.bazbar", "ba.", "zzz")
	foozzzbazbar
<
replace_once({str}, {from}, {to})	*Vital.Data.String.replace_once()*
	Returns string replaced {from} to {to} from {str} at once.
>
	:echo String.replace("foobarbazbar", "bar", "zzz")
	foozzzbazzzz
	:echo String.replace_once("foobarbazbar", "bar", "zzz")
	foozzzbazbar
<
scan({str}, {pattern})			*Vital.Data.String.scan()*
	Returns |List| which matched {pattern} in {str}.

reverse({str})				*Vital.Data.String.reverse()*
	Returns a reversed string.  This works on character base.
>
	:echo String.reverse("string")
	gnirts
<
common_head({strs})			*Vital.Data.String.common_head()*
	Returns a common part of head of strings.
>
	:echo String.common_head(['neocomplcache', 'neosnippet', 'neobundle'])
	'neo'
<
split_leftright({expr}, {pattern})	*Vital.Data.String.split_leftright()*
	Returns |List| that contains two |String| split by {pattern}.
>
	:echo String.split_leftright('neocomplcache', 'neo\zs.....')
	['neo', 'cache']
<
split3({expr}, {pattern})		*Vital.Data.String.split3()*
	Like |Vital.Data.String.split_leftright()|, but this function returns
	[left, middle, right] not only [left, right].
>
	:echo String.split3('neocomplcache', 'neo\zs.....')
	['neo', 'compl', 'cache']
<
					*Vital.Data.String.nsplit()*
nsplit({expr}, {n} [, {pattern} [, {keepempty}]])
	Behaves like |split()|.  Returns a list which is limited as {n}'th
	elements.

chop({str}) 				*Vital.Data.String.chop()*
	Removes last character from {str}.

chomp({str}) 				*Vital.Data.String.chomp()*
	Removes last \r,\n,\r\n from {str}.

trim({str})	                	*Vital.Data.String.trim()*
	Returns |String| removed spaces from the beginning and end of a {str}.

wrap({str}[, {columns}])		*Vital.Data.String.wrap()*
	Returns |String| wrapped to fit to |columns| width.
        Default: {columns} = &columns

nr2byte({nr})				*Vital.Data.String.nr2byte()*
	Returns utf-8 bytes which has the number value {nr}.

nr2enc_char({charcode})			*Vital.Data.String.nr2enc_char()*
	Returns a string which has the number value {nr}.  This function
	depends on |encoding| option.

nr2hex({nr})				*Vital.Data.String.nr2hex()*
	Returns a hex string which has the number value {nr}.

substitute_last({expr}, {pat}, {sub}})	*Vital.Data.String.substitute_last()*
	Behaves like |substitute()|, but it only replaces the last matched
	string.

==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
