*vital.txt*		A comprehensive Vim utility functions for Vim plugins.

==============================================================================
CONTENTS				*Vital-contents*

INTRODUCTION			|Vital-introduction|
USAGE				|Vital-usage|
INTERFACE			|Vital-interface|
  FUNCTIONS			  |Vital-functions|
  Vital object			  |Vital-Vital-object|
  VARIABLES			  |Vital-variables|
LINKS				|Vital-links|



==============================================================================
INTRODUCTION				*Vital-introduction*

*Vital* is like a plugin which has both aspects of Bundler and jQuery at the
same time.

 Bundler: http://gembundler.com/
 jQuery:  http://jquery.com/

If you are a Vim user who doesn't make Vim plugins, please ignore this page.
If you are a Vim plugin author, please check this out.

==============================================================================
USAGE					*Vital-usage*

Assuming your Vim plugin name is "ujihisa", you can define your utility
function set 'ujihisa#util' just by
>
    let s:P = vital#of('ujihisa').import('Process')
    function! ujihisa#util#system(...)
      return call(s:P.system, a:000, s:P)
    endfunction
<
and then you can call functions by 'ujihisa#util#system()', without taking
care of |vital.vim| itself. It's all hidden.

|Vital| has module system. The below is an example to import/load a module
"data/ordered_set" and to call a function "f()" of the module.
>
    let s:V = vital#of('ujihisa')
    let s:O = s:V.import('Data.OrderedSet')
    call s:O.f()
<
or
>
    let s:V = vital#of('ujihisa')
    call s:V.load('Data.OrderedSet')
    call s:V.Data.OrderedSet.f()
<
or
>
    let s:V = vital#of('ujihisa')
    call s:V.import('Data.OrderedSet', s:)
    call s:f()
<
We recommend you to use a capital letter for a Vital module dictionary to
assign as Vital convention. That makes your code more readable among Vital
programmers.

When you start using vital for your own Vim plugin for the first time, you
have to embed vital. See |vitalizer.txt| about the details how to embed and
keep it updated.

==============================================================================
INTERFACE				*Vital-interface*

------------------------------------------------------------------------------
FUNCTIONS 				*Vital-functions*

vital#of({plugin-name})			*vital#of()*
	Creates a new Vital object(|Vital-Vital-object|).

------------------------------------------------------------------------------
Vital object 				*Vital-Vital-object*

Vital.import({module-name} [, {to}])	*Vital-Vital.import()*
	Imports a single module specified by {module-name} to {to} or empty
	dictionary, and returns it.
>
	let s:List = s:V.import('Data.List')
	echo s:List.uniq([1,1,2])

Vital.load({module-name})		*Vital-Vital.load()*
	Loads a module to the Vital directly.
>
	call s:V.load('Data.List')
	echo s:V.Data.List.uniq([1,1,2])

Vital.exists({module-name})		*Vital-Vital.exists()*
	Checks whether a module specified by {module-name} exists.

Vital.search({pattern})			*Vital-Vital.search()*
	Searches available modules.  Returns module names by |List|.
	Wildcard '*' is available in {pattern}.  This matches to any strings
	in the part of module name that excludes ".".
	Wildcard '**' is available in {pattern}.  This is similar to '*' but
	also matches to ".".
>
	echo s:V.search('Data.*')
	echo s:V.search('Data.*List')
	echo s:V.search('**')  " returns all available module names



------------------------------------------------------------------------------
VARIABLES 				*Vital-variables*

g:vital_debug				*g:vital_debug*
	Default: 0

	Vital.import and Vital.load ignore functions which name begins with
	underscore, but this option enables importing/loading such functions.
>
	let g:vital_debug = 1
<
	Note that this option is only for Vital plugin developers; not for
	Vital users.



==============================================================================
LINKS					*Vital-links*

 Delegation in Vim script:
   http://ujihisa.blogspot.com/2011/02/delegation-in-vim-script.html
 Core concept of vital (in Japanese):
   http://d.hatena.ne.jp/thinca/20110310/1299768323
 How to make a vital module (in Japanese):
   http://d.hatena.ne.jp/thinca/20110311/1299769233
 API Reference (in Japanese):
   http://d.hatena.ne.jp/kanno_kanno/20120107/1325949855
 Let's use vital.vim (in Japanese):
   http://qiita.com/rbtnn/items/deb569ebc94d5172a5e5

 Vitalize command:
  |vitalizer.txt|

 Vital modules				*Vital-modules*
  |vital-assertion.txt|		  assertion library
  |vital-bitwise.txt|		  bitwise operators
  |vital-concurrent_process.txt|  manages processes concurrently with vimproc
  |vital-data-base64.txt|	  base64 utilities library
  |vital-data-bignum.txt|	  multi precision integer library
  |vital-data-closure.txt|	  Provide Closure object
  |vital-data-collection.txt|	  Utilities both for list and dict
  |vital-data-counter.txt|      Counter library to support convenient tallies
  |vital-data-dict.txt|		  dictionary utilities library
  |vital-data-lazylist.txt|	  lazy list including file io
  |vital-data-list.txt|		  list utilities library
  |vital-data-optional.txt|	  optional value library
  |vital-data-ordered_set.txt|	  ordered collection library
  |vital-data-string.txt|	  string utilities library
  |vital-data-tree.txt|		  tree utilities library
  |vital-database-sqlite.txt|	  sqlite utilities library
  |vital-date-time.txt|		  date and time library
  |vital-experimental-functor.txt|  Utilities for functor
  |vital-interpreter-brainf__k.txt| Brainf**k interpreter
  |vital-locale-message.txt|	  very simple message localization library
  |vital-lua-prelude.txt|	  crucial functions for lua integration
  |vital-mapping.txt|		  Utilities for mapping
  |vital-math.txt|		  Mathematical functions
  |vital-option_parser.txt|	  Option parser library for Vim
  |vital-prelude.txt|		  crucial functions
  |vital-process.txt|		  Utilities for process
  |vital-process_manager.txt|	  process manager with vimproc
  |vital-random-mt19937ar.txt|	  random number generator using mt19937ar
  |vital-random-xor128.txt|	  random number generator using xor128
  |vital-random.txt|		  Random utility frontend library
  |vital-system-cache.txt|	  An unified cache system
  |vital-system-file.txt|	  filesystem utilities library
  |vital-system-filepath.txt|	  path string utilities library
  |vital-text-csv.txt|		  CSV library
  |vital-text-ini.txt|		  INI file library
  |vital-text-lexer.txt|	  lexer library
  |vital-text-ltsv.txt|		  LTSV library
  |vital-text-parser.txt|	  parser library
  |vital-text-sexp.txt|		  S-Expression parser
  |vital-text-table.txt|	  Character table library
  |vital-text-toml.txt|		  TOML library
  |vital-vim-buffer.txt|	  Vim's buffer related stuff in general
  |vital-vim-buffer_manager.txt|    buffer manager
  |vital-vim-compat.txt|	  Vim compatibility wrapper functions
  |vital-vim-python.txt|	  +python/+python3 compatibility functions
  |vital-vim-message.txt|	  Vim message functions
  |vital-vim-search.txt|	  Vim's [I like function
  |vital-vim-script_local.txt|	  Get script-local things
  |vital-vim-view_tracer.txt|	  Trace |window| and |tabpage|
  |vital-vim-guard.txt|		  Guard options/variables
  |vital-web-html.txt|		  HTML parser written in pure Vim script
  |vital-web-http.txt|		  simple HTTP client library
  |vital-web-json.txt|		  JSON parser written in pure Vim script
  |vital-web-uri.txt|		  URI manipulation library
  |vital-web-xml.txt|		  XML parser written in pure Vim script

 External vital modules:
  https://github.com/vim-jp/vital.vim/wiki/External-vital-modules

==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
