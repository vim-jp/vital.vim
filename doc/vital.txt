*vital.txt*		A comprehensive Vim utility functions for Vim plugins.

==============================================================================
CONTENTS				*Vital-contents*

INTRODUCTION			|Vital-introduction|
USAGE				|Vital-usage|
INTERFACE			|Vital-interface|
  FUNCTIONS			  |Vital-functions|
  Vital object			  |Vital-Vital-object|
  VARIABLES			  |Vital-variables|
LINKS				|Vital-links|



==============================================================================
INTRODUCTION				*Vital-introduction*

*Vital* is like a plugin which has both aspects of Bundler and jQuery at the
same time.

 Bundler: http://gembundler.com/
 jQuery:  http://jquery.com/

If you are a Vim user who doesn't make Vim plugins, please ignore this page.
If you are a Vim plugin author, please check this out.

==============================================================================
USAGE					*Vital-usage*

Assuming your Vim plugin name is "ujihisa", you can define your utility
function set 'ujihisa#util' just by
>
    let s:P = vital#of('ujihisa').import('Process')
    function! ujihisa#util#system(...)
      return call(s:P.system, a:000, s:P)
    endfunction
<
and then you can call functions by 'ujihisa#util#system()', without taking
care of |vital.vim| itself. It's all hidden.

|Vital| has module system. The below is an example to import/load a module
"data/ordered_set" and to call a function "f()" of the module.
>
    let s:V = vital#of('ujihisa')
    let s:O = s:V.import('Data.OrderedSet')
    call s:O.f()
<
or
>
    let s:V = vital#of('ujihisa')
    call s:V.load('Data.OrderedSet')
    call s:V.Data.OrderedSet.f()
<
or
>
    let s:V = vital#of('ujihisa')
    call s:V.import('Data.OrderedSet', s:)
    call s:f()
<
We recommend you to use a capital letter for a Vital module dictionary to
assign as Vital convention. That makes your code more readable among Vital
programmers.

When you start using vital for your own Vim plugin for the first time, you
have to embed vital. See |vitalizer.txt| about the defails how to embed and
keep it updated.

==============================================================================
INTERFACE				*Vital-interface*

------------------------------------------------------------------------------
FUNCTIONS 				*Vital-functions*

vital#of({plugin-name})			*vital#of()*
	Creates a new Vital object(|Vital-Vital-object|).

------------------------------------------------------------------------------
Vital object 				*Vital-Vital-object*

Vital.import({module-name} [, {to}])	*Vital-Vital.import()*
	Imports a single module specified by {module-name} to {to} or empty
	dictionary, and returns it.
>
	let s:List = s:V.import('Data.List')
	echo s:List.uniq([1,1,2])

Vital.load({module-name})		*Vital-Vital.load()*
	Loads a module to the Vital directly.
>
	call s:V.load('Data.List')
	echo s:V.Data.List.uniq([1,1,2])

Vital.exists({module-name})		*Vital-Vital.exists()*
	Checks whether a module specified by {module-name} exists.

Vital.search({pattern})			*Vital-Vital.search()*
	Searches available modules.  Returns module names by |List|.
	Wildcard '*' is available in {pattern}.
>
	echo s:V.search('Data.*')
	echo s:V.search('Data.*List')



------------------------------------------------------------------------------
VARIABLES 				*Vital-variables*

g:vital_debug				*g:vital_debug*
	Default: 0

	Vital.import and Vital.load ignore functions which name begins with
	underscore, but this option enables importing/loading such functions.
>
	let g:vital_debug = 1
<
	Note that this option is only for Vital plugin developers; not for
	Vital users.



==============================================================================
LINKS					*Vital-links*

 Delegation in Vim script:
   http://ujihisa.blogspot.com/2011/02/delegation-in-vim-script.html
 Core concept of vital (in Japanese):
   http://d.hatena.ne.jp/thinca/20110310/1299768323
 How to make a vital module (in Japanese):
   http://d.hatena.ne.jp/thinca/20110311/1299769233
 API Reference (in Japanese):
   http://d.hatena.ne.jp/kanno_kanno/20120107/1325949855

 Vitalize command
  |vitalizer.txt|

 Vital modules
  |vital-bitwise.txt|
  |vital-data-base64.txt|
  |vital-database-sqlite.txt|
  |vital-data-collection.txt|
  |vital-data-dict.txt|
  |vital-data-lazylist.txt|
  |vital-data-list.txt|
  |vital-data-ordered_set.txt|
  |vital-data-string.txt|
  |vital-data-tree.txt|
  |vital-date_time.txt|
  |vital-experimental-functor.txt|
  |vital-interpreter-brainf__k.txt|
  |vital-locale-message.txt|
  |vital-lua-prelude.txt|
  |vital-mapping.txt|
  |vital-math.txt|
  |vital-option_parser.txt|
  |vital-prelude.txt|
  |vital-process_manager.txt|
  |vital-process.txt|
  |vital-random.txt|
  |vital-random-xor128.txt|
  |vital-system-cache.txt|
  |vital-system-filepath.txt|
  |vital-system-file.txt|
  |vital-text-csv.txt|
  |vital-text-lexer.txt|
  |vital-text-ltsv.txt|
  |vital-text-parser.txt|
  |vital-vim-buffer_manager.txt|
  |vital-vim-buffer.txt|
  |vital-vim-compat.txt|
  |vital-vim-message.txt|
  |vital-web-html.txt|
  |vital-web-http.txt|
  |vital-web-json.txt|
  |vital-web-xml.txt|

==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
