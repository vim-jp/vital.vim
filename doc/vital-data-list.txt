*vital-data-list.txt*		list utilities library.

==============================================================================
CONTENTS				*Vital.Data.List-contents*

INTRODUCTION			|Vital.Data.List-introduction|
INTERFACE			|Vital.Data.List-interface|
  Functions			  |Vital.Data.List-functions|

==============================================================================
INTRODUCTION				*Vital.Data.List-introduction*

*Vital.Data.List* is List Utilities Library.
It provides some functions to manipulate |List|.

==============================================================================
INTERFACE				*Vital.Data.List-interface*
------------------------------------------------------------------------------
FUNCTIONS				*Vital.Data.List-functions*

pop({list})				*Vital.Data.List.pop()*
	Removes the last element from |List| {list} and returns the element.

push({list}, {val})			*Vital.Data.List.push()*
	Appends {val} to the end of |List| {list} and returns the list itself.

shift({list})				*Vital.Data.List.shift()*
	Removes the first element from |List| {list} and returns the element.

unshift({list}, {val})			*Vital.Data.List.unshift()*
	Inserts {val} to the head of |List| {list} and returns the list
	itself.

uniq({list} [, {expr}])			*Vital.Data.List.uniq()*
	Removes duplicate elements from |List| {list}, nondestructively.  In
	particular, it keeps only the first occurrence of each element.
	If {expr} is given, uniqueness is judged with the value to which a
	formula is applied.

clear({list})				*Vital.Data.List.clear()*
	Removes all the items of |List| {list}.  Returns the empty list.

concat({list})				*Vital.Data.List.concat()*
	Concatenates |List| {list} of lists.
>
	:echo List.concat([[1], [2, 3]])
	[1, 2, 3]
<
	This is similar to |Vital.Data.List.flatten()| but this doesn't
	flatten recursively.

flatten({list})				*Vital.Data.List.flatten()*
	Flattens |List| {list} of lists recursively.
>
	:echo List.flatten([[1], [2, 3]])
	[1, 2, 3]
	:echo List.flatten([[1], 2, 3])
	[1, 2, 3]
<
sort({list}, {expr})			*Vital.Data.List.sort()*
	Sorts the items in |List| {list} in-place.  Returns {list}.  {expr}
	must be a |String| or a |Funcref|.  When {expr} is a |Funcref|, this
	function returns the same result as |sort()|.  When {expr} is a
	|String|, this function uses {expr} to compare items.  Inside {expr}
	a:a and a:b have the value of the current items.  The evaluating
	result of {expr} must have zero if they are equal, 1 or bigger if a:a
	sorts after the a:b, -1 or smaller if a:a sorts before a:b.
>
	function MyCompare(i1, i2)
		return a:i1 == a:i2 ? 0 : a:i1 > a:i2 ? 1 : -1
	endfunction
	let list = ['pineapple', 'orange', 'banana', 'apple']
	:echo List.sort(copy(list), function('MyCompare'))
	['apple', 'banana', 'orange', 'pineapple']
	:echo List.sort([3, 1, 2], 'a:a - a:b')
	[1, 2, 3]
	:echo List.sort(copy(list), 'len(a:a)-len(a:b)')
	['apple', 'orange', 'banana', 'pineapple']
<
sort_by({list}, {expr})			*Vital.Data.List.sort_by()*
	Returns a sorted |List| with key in |List| {list}.

max({list}, {expr})			*Vital.Data.List.max()*
	Returns a maximum value in {list} through given {expr}.
	Returns 0 if {list} is empty.
	"v:val" can be used in {expr}.
>
	:echo List.max(['pineapple','orange','banana','apple'], 'len(v:val)')
	pineapple
	:echo List.max([20, -50, -15, 30], 'abs(v:val)')
	-50
<
min({list}, {expr})			*Vital.Data.List.min()*
	Returns a minimum value in |List| {list} through given {expr}.
	Returns 0 if {list} is empty.
	"v:val" can be used in {expr}.
>
	:echo List.min(['pineapple','orange','banana','apple'], 'len(v:val)')
	apple
	:echo List.min([20, -50, -15, 30], 'abs(v:val)')
	-15
<
char_range({from}, {to})		*Vital.Data.List.char_range()*
	Returns a |List| of letters from {from} to {to}.

has({list}, {value})			*Vital.Data.List.has()*
	Returns Number 1 if {value} is in |List| {list}, otherwise zero.

has_index({list}, {index})		*Vital.Data.List.has_index()*
	Returns Number 1 if can point to {index} for |List| {list}, otherwise
	zero.  If {index} is negative Number, this function returns zero.

span({string}, {list})			*Vital.Data.List.span()*
	Returns a list of two lists where concatenation of them is
	equal to {list}, all the items of the first list satisfy {string} and
	the first item of the second list does not satisfy {string}.
	Inside {string} |v:val| has the value of the current item.

	Behaves like Haskell's Data.List.span().
>
	:echo List.span("v:val==1", [1, 2])
	[[1], [2]]
	:echo List.span('v:val < 5', [1, 3, 5, 2])
	[[1, 3], [5, 2]]
	:echo List.span('v:val > 3', [1, 2, 3, 4, 5])
	[[], [1, 2, 3, 4, 5]]
	:echo List.span('v:val < 3', [1, 2, 3, 4, 5])
	[[1, 2], [3, 4, 5]]
<
break({expr}, {list})			*Vital.Data.List.break()*
	Returns a list of two lists where concatenation of them is
	equal to {list}, all the items of the first list do not satisfy
	{string} and the first item of the second list satisfies {string}.
	Inside {string} |v:val| has the value of the current item.

	Behaves like Haskell's Data.List.break().
>
	:echo List.break("v:val==1", [1, 2])
	[[], [1, 2]]
	:echo List.break('v:val == 5', [1, 3, 5, 2])
	[[1, 3], [5, 2]]
	:echo List.break('v:val > 3', [1, 2, 3, 4, 5])
	[[1, 2, 3], [4, 5]]
	:echo List.break('v:val < 3', [1, 2, 3, 4, 5])
	[[], [1, 2, 3, 4, 5]]
<
all({expr}, {list})			*Vital.Data.List.all()*
	Returns Number 1 if all the items in |List| {list} fulfill the
	condition {expr}, zero otherwise.
	If {list} is empty, this function returns 1.

	This function behaves like Haskell's Prelude.all().
>
	:echo List.all('v:val % 2 == 0', [2, 8, 4, 6])
	1
	:echo List.all('v:val % 2 == 1', [2, 8, 4, 6])
	0
	:echo List.all('v:val % 2 == 0', [2, 8, 5, 6])
	0
	:echo List.all('0 < v:val', [2, 8, 4, 6])
	1
	:echo List.all('0 < v:val', [2, 0, 4, 6])
	0
<
any({expr}, {list})			*Vital.Data.List.any()*
	Returns Number 1 if at least one item in |List| {list} fulfills the
	condition {expr}, zero otherwise.  If {list} is empty, this function
	returns 1.

	This function behaves like Haskell's Prelude.any().
>
	:echo List.any('v:val % 2 == 0', [2, 8, 4, 6])
	1
	:echo List.all('v:val % 2 == 1', [2, 8, 4, 6])
	0
	:echo List.any('v:val % 2 == 0', [2, 8, 5, 6])
	1
	:echo List.any('0 < v:val', [2, 8, 4, 6])
	1
	:echo List.any('0 < v:val', [2, 0, 4, 6])
	1
<
and({list})				*Vital.Data.List.and()*
	Returns Number 1 if all the items of |List| {list} are non-zero
	Numbers, zero otherwise.  If {list} is empty, this function returns 1.

	This function behaves like Haskell's Prelude.and().
>
	:echo List.and([1, 2, 3, 1])
	1
	:echo List.and([1, 0, 3, 1])
	0
	:echo List.and([0, 0, 0, 0])
	0
<
or({list})				*Vital.Data.List.or()*
	Returns Number 1 if at least one item in List {list} is non-zero,
	zero otherwise.  If {list} is empty, this function returns 1.

	This function behaves like Haskell's Prelude.or().
>
	:echo List.or([1, 2, 3, 1])
	1
	:echo List.or([1, 0, 3, 1])
	1
	:echo List.or([0, 0, 0, 0])
	0
<
partition({expr}, {list})		*Vital.Data.List.partition()*
	Behaves like Haskell's Data.List.partition().

foldl({f}, {init}, {xs})		*Vital.Data.List.foldl()*
	Behaves like Haskell's Data.List.foldl().

foldl1({f}, {xs})			*Vital.Data.List.foldl1()*
	Behaves like Haskell's Data.List.foldl1().

foldr({f}, {init}, {xs})		*Vital.Data.List.foldr()*
	Behaves like Haskell's Data.List.foldr().

foldr1({f}, {xs})			*Vital.Data.List.foldr1()*
	Behaves like Haskell's Data.List.foldr1().

zip(...)				*Vital.Data.List.zip()*
	Behaves like python's zip().
>
	:echo List.zip([1, 2, 3], [4, 5, 6], [7, 8, 9])
	[[1, 4, 7], [2, 5, 8], [3, 6, 9]]
<

with_index({list} [, {offset}])		*Vital.Data.List.with_index()*
	Returns {list} with index. {offset} means the base of index.
	If you specify {offset}, index starts with {offset}.
>
	:echo List.with_index(['a', 'b', 'c'])
	[['a', 0], ['b', 1], ['c', 2]]
<
	This function is useful when used with |:for|.
	For example, when you have lines as a list of string and you want to
	output a line with a line number to each line, you may write as below.
>
	for idx in range(1, len(lines))
		echo idx.': '.lines[idx]
	endfor
<
	This procedure can be rewritten using with_index() as below.
>
	for [line, idx] in List.with_index(lines, 1)
		echo idx.': '.line
	endfor
<
==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
