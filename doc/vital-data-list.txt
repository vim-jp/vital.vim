*vital-data-list.txt*		list utilities library.

==============================================================================
CONTENTS				*Vital.Data.List-contents*

INTRODUCTION			|Vital.Data.List-introduction|
INTERFACE			|Vital.Data.List-interface|
  Functions			  |Vital.Data.List-functions|

==============================================================================
INTRODUCTION				*Vital.Data.List-introduction*

*Vital.Data.List* is List Utilities Library.
It provides some functions to manipulate |List|.

==============================================================================
INTERFACE				*Vital.Data.List-interface*
------------------------------------------------------------------------------
FUNCTIONS				*Vital.Data.List-functions*

pop({list})				*Vital.Data.List.pop()*
	Removes the last element from a list and returns the element.

push({list}, {val})			*Vital.Data.List.push()*
	Appends {val} to {list} and returns the list itself.

shift({list})				*Vital.Data.List.shift()*
	Removes the first element from a list and returns the element.

unshift({list}, {val})			*Vital.Data.List.unshift()*
	Inserts {val} to the head of {list} and returns the list itself.

uniq({list} [, {expr}])			*Vital.Data.List.uniq()*
	Removes duplicates elements from {list}, nondestructively.  In
	particular, it keeps only the first occurrence of each element.
	If {expr} is given, uniquity is judged with the value to which a
	formula is applied.

clear({list})				*Vital.Data.List.clear()*
	Removes all the items of {list}.  Returns the empty list.

concat({list})				*Vital.Data.List.concat()*
	Concatenates a list {list} of lists.
>
	:echo s:list.concat([[1],[2,3]])
	[1,2,3]
<
	This is similar to |Vital.Data.List.flatten()| but this doesn't
	flatten recursively.

flatten({list})				*Vital.Data.List.flatten()*
	Returns elements flatten in {list}.
>
	:echo s:list.flatten([[1],[2,3]])
	[1,2,3]
	:echo s:list.flatten([[1],2,3])
	[1,2,3]
<
sort({list}, {expr})			*Vital.Data.List.sort()*
	Returns sorted elements in {list}.  {expr} is operate to compare.
	This variable can be specified |String| or |Funcref|.
>
	:echo s:list.sort([3,1,2], 'a:a - a:b')
	[1,2,3]
	:echo s:list.sort(['A','a','b'], function('MyCompare'))
<
sort_by({list}, {expr})			*Vital.Data.List.sort_by()*
	Returns sorted elements with key in {list}.

max({list}, {expr})			*Vital.Data.List.max()*
	Returns a maximum value in {list} through given {expr}.
	Returns 0 if {list} is empty.
	"v:val" can be used in {expr}.

min({list}, {expr})			*Vital.Data.List.min()*
	Returns a minimum value in {list} through given {expr}.
	Returns 0 if {list} is empty.
	"v:val" can be used in {expr}.

char_range({from}, {to})		*Vital.Data.List.char_range()*
	Returns letters between {from} and {to}.

has({list}, {Value})			*Vital.Data.List.has()*
	Returns Number non-zero if {Value} is in {list}, otherwize zero.

has_index({list}, {index})		*Vital.Data.List.has_index()*
	Returns 1 if can point to {index} for {list}, otherwize zero.

span({f}, {xs})				*Vital.Data.List.span()*
	Behaves like Haskell's Data.List.span().
>
	:echo s:list.span("v:val==1", [1,2])
	[[1],[2]]
<
break({f}, {xs})			*Vital.Data.List.break()*
	Behaves like Haskell's Data.List.break().
>
	:echo s:list.span("v:val==1", [1,2])
	[[1]]
<
partition({f}, {xs})			*Vital.Data.List.partition()*
	Behaves like Haskell's Data.List.partition().

all({f}, {xs})				*Vital.Data.List.all()*
	Behaves like Haskell's Prelude.all().

any({f}, {xs})				*Vital.Data.List.any()*
	Behaves like Haskell's Prelude.any().

and({xs})				*Vital.Data.List.and()*
	Behaves like Haskell's Prelude.and().

or({xs})				*Vital.Data.List.or()*
	Behaves like Haskell's Prelude.or().

foldl({f}, {init}, {xs})		*Vital.Data.List.foldl()*
	Behaves like Haskell's Data.List.foldl().

foldl1({f}, {xs})			*Vital.Data.List.foldl1()*
	Behaves like Haskell's Data.List.foldl1().

foldr({f}, {init}, {xs})		*Vital.Data.List.foldr()*
	Behaves like Haskell's Data.List.foldr().

foldr1({f}, {xs})			*Vital.Data.List.foldr1()*
	Behaves like Haskell's Data.List.foldr1().

zip(...)				*Vital.Data.List.zip()*
	Behaves like python's zip().
>
	:echo s:list.zip([1,2,3],[4,5,6],[7,8,9])
	[[1,4,7],[2,5,8],[3,6,9]]
<
==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
