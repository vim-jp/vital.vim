*vital-data-list.txt*		list utilities library.

Maintainer: ujihisa <ujihisa at gmail com>

==============================================================================
CONTENTS				*Vital.Data.List-contents*

INTRODUCTION			|Vital.Data.List-introduction|
INTERFACE			|Vital.Data.List-interface|
  Functions			  |Vital.Data.List-functions|

==============================================================================
INTRODUCTION				*Vital.Data.List-introduction*

*Vital.Data.List* is a list utilities library.  It provides some functions to
manipulate |List|.

>
	let V = vital#of("vital")
	let L = V.import("Data.List")

	let s = []
	echo L.push(s, 1)
	" [1]
	echo L.push(s, 2)
	" [1, 2]
	echo L.push(s, 3)
	" [1, 2, 3]
	echo s
	" [1, 2, 3]
	echo L.pop(s)
	" 3
	echo L.pop(s)
	" 2
	echo s
	" [1]
<

==============================================================================
INTERFACE				*Vital.Data.List-interface*
------------------------------------------------------------------------------
FUNCTIONS				*Vital.Data.List-functions*

pop({list})				*Vital.Data.List.pop()*
	Removes the last element from |List| {list} and returns the element,
	as if the {list} is a stack.

push({list}, {val})			*Vital.Data.List.push()*
	Appends {val} to the end of |List| {list} and returns the list itself,
	as if the {list} is a stack.

shift({list})				*Vital.Data.List.shift()*
	Removes the first element from |List| {list} and returns the element.

unshift({list}, {val})			*Vital.Data.List.unshift()*
	Inserts {val} to the head of |List| {list} and returns the list
	itself.

cons({val}, {list})			*Vital.Data.List.cons()*
	Makes new |List| which first item is {val} and the rest of items are
	|List| {list}.
	See also: |Vital.Data.List.cons()|
>
	echo L.cons(1, [2, 3])
	" [1, 2, 3]
	echo L.cons(1, [])
	" [1]
	echo L.cons([1], [2, 3])
	" [[1], 2, 3]
	echo L.cons([1], 2)
	" ERROR: E745
<

conj({list}, {val})			*Vital.Data.List.conj()*
	Makes new |List| which first items are |List| {list} and the final
	item is {val}.
	See also: |Vital.Data.List.conj()|
>
	echo L.conj([2, 3], 1)
	" [2, 3, 1]
	echo L.conj([], 1)
	" [1]
	echo L.conj([2, 3], [1])
	" [2, 3, [1]]
	echo L.conj(2, [1])
	" ERROR: E745
<

uniq({list} [, {expr}])			*Vital.Data.List.uniq()*
	Removes duplicate elements from |List| {list}, nondestructively.  In
	particular, it keeps only the first occurrence of each element.
	If {expr} is given, uniqueness is judged with the value to which a
	formula is applied.

clear({list})				*Vital.Data.List.clear()*
	Removes all the items of |List| {list}.  Returns the empty list.

concat({list})				*Vital.Data.List.concat()*
	Concatenates |List| {list} of lists.
>
	echo L.concat([[1], [2, 3]])
	" [1, 2, 3]
<
	This is similar to |Vital.Data.List.flatten()| but this doesn't
	flatten recursively.

flatten({list}, [, {limit}])		*Vital.Data.List.flatten()*
	Flattens |List| {list} of lists recursively.  When the {limit} argument
	is given, the function keeps nested items by the {limit} is maximum
	size.
>
	echo L.flatten([[1], [2, 3]])
	" [1, 2, 3]
	echo L.flatten([[1], 2, 3])
	" [1, 2, 3]
	echo L.flatten([[['a']], [[['b']], 'c']], 2)
	" ['a', ['b'], 'c']
<
sort({list}, {expr})			*Vital.Data.List.sort()*
	Sorts the items in |List| {list} in-place.  Returns {list}.  {expr}
	must be a |String| or a |Funcref|.  When {expr} is a |Funcref|, this
	function returns the same result as |sort()|.  When {expr} is a
	|String|, this function uses {expr} to compare items.  Inside {expr}
	a:a and a:b have the value of the current items.  The evaluating
	result of {expr} must have zero if they are equal, 1 or bigger if a:a
	sorts after the a:b, -1 or smaller if a:a sorts before a:b.
>
	function! MyCompare(i1, i2)
	  return a:i1 ==
	    \ a:i2 ?        0 :
	    \ a:i1 > a:i2 ? 1 :
	    \               -1
	endfunction

	let list = ['pineapple', 'orange', 'banana', 'apple']
	echo L.sort(copy(list), function('MyCompare'))
	" ['apple', 'banana', 'orange', 'pineapple']

	echo L.sort([3, 1, 2], 'a:a - a:b')
	" [1, 2, 3]

	echo L.sort(copy(list), 'len(a:a)-len(a:b)')
	" ['apple', 'orange', 'banana', 'pineapple']
<
sort_by({list}, {expr})			*Vital.Data.List.sort_by()*
	Returns a sorted |List| with key in |List| {list}.

max_by({list}, {expr})			*Vital.Data.List.max_by()*
	Returns a maximum value in {list} through given {expr}.
	Throws an exception if {list} is empty.
	"v:val" can be used in {expr}.
>
	echo L.max_by(['pineapple','orange','banana','apple'], 'len(v:val)')
	" pineapple
	echo L.max_by([20, -50, -15, 30], 'abs(v:val)')
	" -50
<

min_by({list}, {expr})			*Vital.Data.List.min_by()*
	Returns a minimum value in |List| {list} through given {expr}.
	Throws an exception if {list} is empty.
	"v:val" can be used in {expr}.
>
	echo L.min_by(['pineapple','orange','banana','apple'], 'len(v:val)')
	" apple
	echo L.min_by([20, -50, -15, 30], 'abs(v:val)')
	" -15
<
char_range({from}, {to})		*Vital.Data.List.char_range()*
	Returns a |List| of letters from {from} to {to}.

has({list}, {value})			*Vital.Data.List.has()*
	Returns Number 1 if {value} is in |List| {list}, otherwise zero.

has_index({list}, {index})		*Vital.Data.List.has_index()*
	Returns Number 1 if can point to {index} for |List| {list}, otherwise
	zero.  If {index} is negative Number, this function returns zero.

span({string}, {list})			*Vital.Data.List.span()*
	Returns a list of two lists where concatenation of them is
	equal to {list}, all the items of the first list satisfy {string} and
	the first item of the second list does not satisfy {string}.
	Inside {string} |v:val| has the value of the current item.

	Behaves like Haskell's Data.List.span().
>
	echo L.span("v:val==1", [1, 2])
	" [[1], [2]]
	echo L.span('v:val < 5', [1, 3, 5, 2])
	" [[1, 3], [5, 2]]
	echo L.span('v:val > 3', [1, 2, 3, 4, 5])
	" [[], [1, 2, 3, 4, 5]]
	echo L.span('v:val < 3', [1, 2, 3, 4, 5])
	" [[1, 2], [3, 4, 5]]
<
break({expr}, {list})			*Vital.Data.List.break()*
	Returns a list of two lists where concatenation of them is
	equal to {list}, all the items of the first list do not satisfy
	{string} and the first item of the second list satisfies {string}.
	Inside {string} |v:val| has the value of the current item.

	Behaves like Haskell's Data.List.break().
>
	echo L.break("v:val==1", [1, 2])
	" [[], [1, 2]]
	echo L.break('v:val == 5', [1, 3, 5, 2])
	" [[1, 3], [5, 2]]
	echo L.break('v:val > 3', [1, 2, 3, 4, 5])
	" [[1, 2, 3], [4, 5]]
	echo L.break('v:val < 3', [1, 2, 3, 4, 5])
	" [[], [1, 2, 3, 4, 5]]
<
all({expr}, {list})			*Vital.Data.List.all()*
	Returns Number 1 if all the items in |List| {list} fulfill the
	condition {expr}, zero otherwise.
	If {list} is empty, this function returns 1.

	This function behaves like Haskell's Prelude.all().
>
	echo L.all('v:val % 2 == 0', [2, 8, 4, 6])
	" 1
	echo L.all('v:val % 2 == 1', [2, 8, 4, 6])
	" 0
	echo L.all('v:val % 2 == 0', [2, 8, 5, 6])
	" 0
	echo L.all('0 < v:val', [2, 8, 4, 6])
	" 1
	echo L.all('0 < v:val', [2, 0, 4, 6])
	" 0
<
any({expr}, {list})			*Vital.Data.List.any()*
	Returns Number 1 if at least one item in |List| {list} fulfills the
	condition {expr}, zero otherwise.  If {list} is empty, this function
	returns 1.

	This function behaves like Haskell's Prelude.any().
>
	echo L.any('v:val % 2 == 0', [2, 8, 4, 6])
	" 1
	echo L.any('v:val % 2 == 1', [2, 8, 4, 6])
	" 0
	echo L.any('v:val % 2 == 0', [2, 8, 5, 6])
	" 1
	echo L.any('0 < v:val', [2, 8, 4, 6])
	" 1
	echo L.any('0 < v:val', [2, 0, 4, 6])
	" 1
<
and({list})				*Vital.Data.List.and()*
	Returns Number 1 if all the items of |List| {list} are non-zero
	Numbers, zero otherwise.  If {list} is empty, this function returns 1.

	This function behaves like Haskell's Prelude.and().
>
	echo L.and([1, 2, 3, 1])
	" 1
	echo L.and([1, 0, 3, 1])
	" 0
	echo L.and([0, 0, 0, 0])
	" 0
<
or({list})				*Vital.Data.List.or()*
	Returns Number 1 if at least one item in List {list} is non-zero,
	zero otherwise.  If {list} is empty, this function returns 1.

	This function behaves like Haskell's Prelude.or().
>
	echo L.or([1, 2, 3, 1])
	" 1
	echo L.or([1, 0, 3, 1])
	" 1
	echo L.or([0, 0, 0, 0])
	" 0
<
partition({expr}, {list})		*Vital.Data.List.partition()*
	Behaves like Haskell's Data.List.partition().

foldl({f}, {init}, {xs})		*Vital.Data.List.foldl()*
	Behaves like Haskell's Data.List.foldl().

>
	echo L.foldl('v:memo + v:val', 0, range(1, 10))
	" 55 := 1+2+3+4+5+6+7+8+9+10
	echo L.foldl('v:memo + v:val', 20, range(1, 10))
	" 75 := 20 + 1+2+3+4+5+6+7+8+9+10
	echo L.foldl('[v:memo, v:val]', [], [1, 2])
	" [[[], 1], 2]
<
foldl1({f}, {xs})			*Vital.Data.List.foldl1()*
	Behaves like Haskell's Data.List.foldl1().
>
	echo L.foldl1('v:memo + v:val', range(1, 10))
	" 55
	echo L.foldl1('[v:memo, v:val]', [1, 2])
	" [1, 2]
<
foldr({f}, {init}, {xs})		*Vital.Data.List.foldr()*
	Behaves like Haskell's Data.List.foldr().
>
	echo L.foldr('v:memo + v:val', 0, range(1, 10))
	" 55
	echo L.foldr('v:memo + v:val', 20, range(1, 10))
	" 75
	echo L.foldr('[v:memo, v:val]', [], [1, 2])
	" [[[], 2], 1]
<
foldr1({f}, {xs})			*Vital.Data.List.foldr1()*
	Behaves like Haskell's Data.List.foldr1().
>
	echo L.foldr1('v:memo + v:val', range(1, 10))
	" 55
	echo L.foldr1('[v:memo, v:val]', [1, 2])
	" [1, 2]
<
zip(...)				*Vital.Data.List.zip()*
	Behaves like python's zip().
>
	echo L.zip([1, 2, 3], [4, 5, 6])
	" [[1, 4], [2, 5], [3, 6]]
	echo L.zip([1, 2, 3], [4, 5, 6], [7, 8, 9])
	" [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
<
with_index({list} [, {offset}])		*Vital.Data.List.with_index()*
	Returns {list} with index. {offset} means the base of index.
	If you specify {offset}, index starts with {offset}.
>
	echo L.with_index(['a', 'b', 'c'])
	" [['a', 0], ['b', 1], ['c', 2]]
	echo L.with_index(['a', 'b', 'c'], 2)
	" [['a', 2], ['b', 3], ['c', 4]]
<
	This function is useful when used with |:for|.
	For example, when you have lines as a list of string and you want to
	output a line with a line number to each line, you may write as below.
>
	for idx in range(1, len(lines))
		echo idx.': '.lines[idx]
	endfor
<
	This procedure can be rewritten using with_index() as below.
>
	for [line, idx] in List.with_index(lines, 1)
		echo idx.': '.line
	endfor
<
has_common_items({list1} {list2})	*Vital.Data.List.has_common_items()*
	Returns non-zero if a:list1 and a:list2 have a common item, otherwise
	zero.
>
	echo L.has_common_items(['a', 'b', 'c'], ['b', 'c'])
	" 1
	echo L.has_common_items(['a', 'c'], ['b', 'c'])
	" 1
	echo L.has_common_items(['a'], ['b', 'c'])
	" 0
<

==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
